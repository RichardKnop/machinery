// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	tasks "github.com/RichardKnop/machinery/v1/tasks"
	mock "github.com/stretchr/testify/mock"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// GetState provides a mock function with given fields: taskUUID
func (_m *Backend) GetState(taskUUID string) (*tasks.TaskState, error) {
	ret := _m.Called(taskUUID)

	var r0 *tasks.TaskState
	if rf, ok := ret.Get(0).(func(string) *tasks.TaskState); ok {
		r0 = rf(taskUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasks.TaskState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupCompleted provides a mock function with given fields: groupUUID, groupTaskCount
func (_m *Backend) GroupCompleted(groupUUID string, groupTaskCount int) (bool, error) {
	ret := _m.Called(groupUUID, groupTaskCount)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int) bool); ok {
		r0 = rf(groupUUID, groupTaskCount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(groupUUID, groupTaskCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupTaskStates provides a mock function with given fields: groupUUID, groupTaskCount
func (_m *Backend) GroupTaskStates(groupUUID string, groupTaskCount int) ([]*tasks.TaskState, error) {
	ret := _m.Called(groupUUID, groupTaskCount)

	var r0 []*tasks.TaskState
	if rf, ok := ret.Get(0).(func(string, int) []*tasks.TaskState); ok {
		r0 = rf(groupUUID, groupTaskCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tasks.TaskState)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(groupUUID, groupTaskCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitGroup provides a mock function with given fields: groupUUID, taskUUIDs
func (_m *Backend) InitGroup(groupUUID string, taskUUIDs []string) error {
	ret := _m.Called(groupUUID, taskUUIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(groupUUID, taskUUIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAMQP provides a mock function with given fields:
func (_m *Backend) IsAMQP() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PurgeGroupMeta provides a mock function with given fields: groupUUID
func (_m *Backend) PurgeGroupMeta(groupUUID string) error {
	ret := _m.Called(groupUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(groupUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PurgeState provides a mock function with given fields: taskUUID
func (_m *Backend) PurgeState(taskUUID string) error {
	ret := _m.Called(taskUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(taskUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStateFailure provides a mock function with given fields: signature, err
func (_m *Backend) SetStateFailure(signature *tasks.Signature, err string) error {
	ret := _m.Called(signature, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tasks.Signature, string) error); ok {
		r0 = rf(signature, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatePending provides a mock function with given fields: signature
func (_m *Backend) SetStatePending(signature *tasks.Signature) error {
	ret := _m.Called(signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tasks.Signature) error); ok {
		r0 = rf(signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStateReceived provides a mock function with given fields: signature
func (_m *Backend) SetStateReceived(signature *tasks.Signature) error {
	ret := _m.Called(signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tasks.Signature) error); ok {
		r0 = rf(signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStateRetry provides a mock function with given fields: signature
func (_m *Backend) SetStateRetry(signature *tasks.Signature) error {
	ret := _m.Called(signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tasks.Signature) error); ok {
		r0 = rf(signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStateStarted provides a mock function with given fields: signature
func (_m *Backend) SetStateStarted(signature *tasks.Signature) error {
	ret := _m.Called(signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tasks.Signature) error); ok {
		r0 = rf(signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStateSuccess provides a mock function with given fields: signature, results
func (_m *Backend) SetStateSuccess(signature *tasks.Signature, results []*tasks.TaskResult) error {
	ret := _m.Called(signature, results)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tasks.Signature, []*tasks.TaskResult) error); ok {
		r0 = rf(signature, results)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerChord provides a mock function with given fields: groupUUID
func (_m *Backend) TriggerChord(groupUUID string) (bool, error) {
	ret := _m.Called(groupUUID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(groupUUID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

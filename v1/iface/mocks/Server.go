// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	brokersiface "github.com/RichardKnop/machinery/v1/brokers/iface"
	config "github.com/RichardKnop/machinery/v1/config"

	context "context"

	iface "github.com/RichardKnop/machinery/v1/backends/iface"

	mock "github.com/stretchr/testify/mock"

	result "github.com/RichardKnop/machinery/v1/backends/result"

	tasks "github.com/RichardKnop/machinery/v1/tasks"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// GetBackend provides a mock function with given fields:
func (_m *Server) GetBackend() iface.Backend {
	ret := _m.Called()

	var r0 iface.Backend
	if rf, ok := ret.Get(0).(func() iface.Backend); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iface.Backend)
		}
	}

	return r0
}

// GetBroker provides a mock function with given fields:
func (_m *Server) GetBroker() brokersiface.Broker {
	ret := _m.Called()

	var r0 brokersiface.Broker
	if rf, ok := ret.Get(0).(func() brokersiface.Broker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(brokersiface.Broker)
		}
	}

	return r0
}

// GetConfig provides a mock function with given fields:
func (_m *Server) GetConfig() *config.Config {
	ret := _m.Called()

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// GetRegisteredTask provides a mock function with given fields: name
func (_m *Server) GetRegisteredTask(name string) (interface{}, error) {
	ret := _m.Called(name)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegisteredTaskNames provides a mock function with given fields:
func (_m *Server) GetRegisteredTaskNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// IsTaskRegistered provides a mock function with given fields: name
func (_m *Server) IsTaskRegistered(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RegisterTask provides a mock function with given fields: name, taskFunc
func (_m *Server) RegisterTask(name string, taskFunc interface{}) error {
	ret := _m.Called(name, taskFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(name, taskFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterTasks provides a mock function with given fields: namedTaskFuncs
func (_m *Server) RegisterTasks(namedTaskFuncs map[string]interface{}) error {
	ret := _m.Called(namedTaskFuncs)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(namedTaskFuncs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendChain provides a mock function with given fields: chain
func (_m *Server) SendChain(chain *tasks.Chain) (*result.ChainAsyncResult, error) {
	ret := _m.Called(chain)

	var r0 *result.ChainAsyncResult
	if rf, ok := ret.Get(0).(func(*tasks.Chain) *result.ChainAsyncResult); ok {
		r0 = rf(chain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.ChainAsyncResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tasks.Chain) error); ok {
		r1 = rf(chain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChainWithContext provides a mock function with given fields: ctx, chain
func (_m *Server) SendChainWithContext(ctx context.Context, chain *tasks.Chain) (*result.ChainAsyncResult, error) {
	ret := _m.Called(ctx, chain)

	var r0 *result.ChainAsyncResult
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.Chain) *result.ChainAsyncResult); ok {
		r0 = rf(ctx, chain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.ChainAsyncResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasks.Chain) error); ok {
		r1 = rf(ctx, chain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChord provides a mock function with given fields: chord, sendConcurrency
func (_m *Server) SendChord(chord *tasks.Chord, sendConcurrency int) (*result.ChordAsyncResult, error) {
	ret := _m.Called(chord, sendConcurrency)

	var r0 *result.ChordAsyncResult
	if rf, ok := ret.Get(0).(func(*tasks.Chord, int) *result.ChordAsyncResult); ok {
		r0 = rf(chord, sendConcurrency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.ChordAsyncResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tasks.Chord, int) error); ok {
		r1 = rf(chord, sendConcurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChordWithContext provides a mock function with given fields: ctx, chord, sendConcurrency
func (_m *Server) SendChordWithContext(ctx context.Context, chord *tasks.Chord, sendConcurrency int) (*result.ChordAsyncResult, error) {
	ret := _m.Called(ctx, chord, sendConcurrency)

	var r0 *result.ChordAsyncResult
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.Chord, int) *result.ChordAsyncResult); ok {
		r0 = rf(ctx, chord, sendConcurrency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.ChordAsyncResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasks.Chord, int) error); ok {
		r1 = rf(ctx, chord, sendConcurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendGroup provides a mock function with given fields: group, sendConcurrency
func (_m *Server) SendGroup(group *tasks.Group, sendConcurrency int) ([]*result.AsyncResult, error) {
	ret := _m.Called(group, sendConcurrency)

	var r0 []*result.AsyncResult
	if rf, ok := ret.Get(0).(func(*tasks.Group, int) []*result.AsyncResult); ok {
		r0 = rf(group, sendConcurrency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*result.AsyncResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tasks.Group, int) error); ok {
		r1 = rf(group, sendConcurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendGroupWithContext provides a mock function with given fields: ctx, group, sendConcurrency
func (_m *Server) SendGroupWithContext(ctx context.Context, group *tasks.Group, sendConcurrency int) ([]*result.AsyncResult, error) {
	ret := _m.Called(ctx, group, sendConcurrency)

	var r0 []*result.AsyncResult
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.Group, int) []*result.AsyncResult); ok {
		r0 = rf(ctx, group, sendConcurrency)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*result.AsyncResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasks.Group, int) error); ok {
		r1 = rf(ctx, group, sendConcurrency)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTask provides a mock function with given fields: signature
func (_m *Server) SendTask(signature *tasks.Signature) (*result.AsyncResult, error) {
	ret := _m.Called(signature)

	var r0 *result.AsyncResult
	if rf, ok := ret.Get(0).(func(*tasks.Signature) *result.AsyncResult); ok {
		r0 = rf(signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.AsyncResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*tasks.Signature) error); ok {
		r1 = rf(signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTaskWithContext provides a mock function with given fields: ctx, signature
func (_m *Server) SendTaskWithContext(ctx context.Context, signature *tasks.Signature) (*result.AsyncResult, error) {
	ret := _m.Called(ctx, signature)

	var r0 *result.AsyncResult
	if rf, ok := ret.Get(0).(func(context.Context, *tasks.Signature) *result.AsyncResult); ok {
		r0 = rf(ctx, signature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.AsyncResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tasks.Signature) error); ok {
		r1 = rf(ctx, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBackend provides a mock function with given fields: backend
func (_m *Server) SetBackend(backend iface.Backend) {
	_m.Called(backend)
}

// SetBroker provides a mock function with given fields: broker
func (_m *Server) SetBroker(broker brokersiface.Broker) {
	_m.Called(broker)
}

// SetConfig provides a mock function with given fields: cnf
func (_m *Server) SetConfig(cnf *config.Config) {
	_m.Called(cnf)
}

// SetPreTaskHandler provides a mock function with given fields: handler
func (_m *Server) SetPreTaskHandler(handler func(*tasks.Signature)) {
	_m.Called(handler)
}
